{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Now that we have a basic understanding of how TypeScript works and how to create actual projects with it, it is time to start creating something actually useful. So now we're going to create a completely new project, with a bit more realistic use cases in mind.</p>\n<p>One major change from the previous part is that <i>we're not going to use ts-node anymore</i>. ts-node is a handy tool, with which it is very easy to get started, but in the long run it is suggested to use the official TypeScript compiler that comes with the <i>typescript</i> npm-package. With this compiler the basic JavaScript files are generated and packaged from the .ts files so that the built <i>production version</i> of the project won't contain any TypeScript code. This is exactly what we are aiming for in the end, since TypeScript in itself is not runnable by browsers or Node.</p>\n<h3>Setting up the project</h3>\n<p>Our project is created for Ilari, who loves riding small planes but has a bit of difficulties managing his flight history. He is quite the coder himself, so he doesn't necessarily need a user interface for his flight records, but he'd like to use the software with HTTP-requests so that the possibility to later extend the application to also include a web-based user interface would be possible.</p>\n<p>Let's start creating our own first real project 'Ilari's flight diaries', as we usually would by running <i>npm init</i> and by installing the <i>typescript</i> package. </p>\n<p>TypeScript's native <i>tsc</i> compiler offers us help initialising our project with the command <i>tsc --init</i>. To be able to run this, we need to add the <i>tsc</i> command to runnable scripts in the package.json file unless we have installed <i>typescript</i> globally. And even if you would have installed typescript globally, you should always include the package as a dev-dependency in your project.</p>\n<p>The npm srcipt for running <i>tsc</i> is set as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ..\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ..\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p> Very often the bare <i>tsc</i> command is set up in the project scripts for other scripts to use, so it is very common to see the <i>tsc</i> command set up within the project like this.</p>\n<p> Now we can initialise our tsconfig.json settings by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"> npm run tsc -- --init</code></pre></div>\n<p> <strong>Notice</strong> the extra -- before the actual argument, arguments before the -- are interpreted for the command <i>npm</i> and ones after are for the command that is run throught the script. </p>\n<p>The created <i>tsconfig.json</i> contains a lengthy list of all of the possible configurations available to use, but  only a few of those are uncommented. Studying the initial <i>tsconfig.json</i> file might be useful for finding some configuration options you might need. It is also completely okay to keep the commented rows in the file just in case you might someday need to expand your configuration settings. </p>\n<p>The preferred settings we want right now are the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>       \n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's go through each setting now: </p>\n<p>The <i>target</i> parameter tells the compiler which ECMAScript version the generated JavaScript should be generated into. ES6 is supported by most browsers and therefore is a good and pretty safe option.</p>\n<p><i>outDir</i> tells where the compiled code should be placed.</p>\n<p><i>module</i> tells the compiler that we want to use <i>commonjs</i> modules in compiled code, so the code uses <em>require</em> instead of <em>import</em> that is not supported in older Node.js versions such as the version 10. </p>\n<p><i>strict</i> is actually a shorthand to include multiple separate options:\n<i>noImplicitAny, noImplicitThis, alwaysStrict, strictBindCallApply, strictNullChecks, strictFunctionTypes and strictPropertyInitialization</i>. These all guide our coding style to use TypeScript features more strictly. The most important for us is perhaps the already familiar <a href=\"https://www.typescriptlang.org/v2/en/tsconfig#noImplicitAny\">noImplicitAny</a> that restricts implicitly setting type <i>any</i>, which happens for example if you don't type the expected parameters of a function. The rest of the options can all be studied more closely on the <a href=\"https://www.typescriptlang.org/v2/en/tsconfig#strict\">tsconfig documentation</a>. Using <i>strict</i> is suggested by the official documentation.</p>\n<p><i>noUnusedLocals</i> gives an error if a local variable is unused and <i>noUnusedParameters</i> when a function has unused parameters. </p>\n<p><i>noFallthroughCasesInSwitch</i> ensures that in a <em>switch case</em> each case ends to <em>return</em> or <em>break</em> statement.</p>\n<p><i>esModuleInterop</i> allows interaperability between commonJS and ES Modules, see more <a href=\"https://www.typescriptlang.org/v2/en/tsconfig#esModuleInterop\">in documentation</a>.</p>\n<p>Now that we have our preferred configuration set, let's continue by installing <i>express</i> and of course also <i>@types/express</i>. Since this is a real project, which is intended to be grown over time we will use eslint from thevery  beginning:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install express\nnpm install --save-dev eslint @types/express @typescript-eslint/eslint-plugin @typescript-eslint/parser</code></pre></div>\n<p>Now our <i>package.json</i> should look something like this: </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ilaris-flight-diaries\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.ts\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.1\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@types/express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.2\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/eslint-plugin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.17.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.8.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.7.5\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also create <i>.eslintrc</i> with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended-requiring-type-checking\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@typescript-eslint/semi\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@typescript-eslint/no-unused-vars\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">\"argsIgnorePattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^_\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     <span class=\"token property\">\"@typescript-eslint/no-explicit-any\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"no-case-declarations\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"parserOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"project\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./tsconfig.json\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we only need to set up our development environment properly, and then we are ready to start writing some serious code. There are many different options and we could use the familiar <i>nodemon</i> with <i>ts-node</i>, but as we saw before, </i>ts-node-dev</i> does the exact same thing and we can continue using it. So, let's install <i>ts-node-dev</i></p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">npm install --save-dev ts-node-dev</code></pre></div>\n<p>And we are ready to start writing some code after defining still a coupe of more npm scripts:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ...\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There is a lot of stuff to go through before you can even start the actual coding. When working with a real project, careful preparations support your development process to a great length, so take the time to create a good setting for yourself and your team so that in the long run everything runs smoothly.</p>\n<h3>Let there be code</h3>\n<p>Now we can finally start coding! As always, we will at start create a ping-endpoint, just to make sure everything is working.</p>\n<p>The contents of the <i>index.ts</i> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we now run the app with <i>npm run dev</i> we can verify that a request to <a href=\"http://localhost:3000/ping\">http://localhost:3000/ping</a> gives response <i>pong</i>, so our configuration is set!</p>\n<p>When starting the app with <i>npm run dev</i>, it is running in development mode, and for sure that is not suitable whenwe later on opera the app in production. </p>\n<p>Let us now try to create the <i>production build</i> by running the TypeScript compiler. Since we have defined the <i>outdir</i> in our tsconfig.json, there's really nothing else to do, but run the script <i>npm run tsc</i>.</p>\n<p>Just like magic a native runnable JavaScript production build of the express backend is created into the directory <i>build</i>.  </p>\n<p>Currently if we run eslint it will also interpret the files in the <i>build</i> directory, which we don't want, since that is compiler generated code. We can prevent this by creating a file <i>.eslintignore</i> with the content we want eslint to ignore, similarly as in <i>gitignore</i>.</p>\n<p>Let us add a npm script for running the application in production mode:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  // ...\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"tsc\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node-dev index.ts\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .ts .\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node build/index.js\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  // ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Wen we run app with <i>npm start</i> we can verify that also the production build works</p>\n<picture><img src=\"/static/863bc762b6f7599c221ee3dc4b35cbc6/14be6/15a.png\" srcset=\"/static/863bc762b6f7599c221ee3dc4b35cbc6/4cce7/15a.png 200w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/bae5f/15a.png 400w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/14be6/15a.png 800w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/1b35a/15a.png 1200w,\n/static/863bc762b6f7599c221ee3dc4b35cbc6/87632/15a.png 1322w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Now we have a minimal working pipeline, with which we can develop our project, and with the help from our compiler and eslint also ensure that a good code quality is maintained. With this base we can actually start creating an app that we could later on deploy into a production environment. </p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.8.-9.9.</h3>\n<p><strong>Before you start the exercises</strong></p>\n<p>For this set of exercises you will be developing a backend for an existing project called <i>Patientor</i> which is a simple medical record application for doctors that handle diagnoses and basic health information of the patients.</p>\n<p>The <a href=\"https://github.com/fullstack-hy2020/patientor\">frontend</a> has already been built by outsider experts and you're task is to create a backend to support the existing code.</p>\n<h4>9.8: Patientor backend, step1</h4>\n<p>Initialise project that will be used by the frontend. Configure eslint and tsconfig with the same configurations that are used in the material. Define a endpoint that responses to HTTP GET requests to route <i>/ping</i>.   </p>\n<p>The project should be runnale with npm scripts both in development mode and as compiled code in production mode.</p>\n<h4>9.9: Patientor backend, step2</h4>\n<p>Fork and clone the project <a href=\"https://github.com/fullstack-hy2020/patientor\">patientor</a>. Start the project with the help of the README-file. You should be able to use the frontend without a functioning backend.</p>\n<p>Ensure that backend answers to the ping request that <i>fronend</i> is makes on startup. Check developer tool to make sure it really works: </p>\n<picture><img src=\"/static/ecb7fbc31d1698f2ba09ee2ee77a4982/14be6/16a.png\" srcset=\"/static/ecb7fbc31d1698f2ba09ee2ee77a4982/4cce7/16a.png 200w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/bae5f/16a.png 400w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/14be6/16a.png 800w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/1b35a/16a.png 1200w,\n/static/ecb7fbc31d1698f2ba09ee2ee77a4982/be5a3/16a.png 1596w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You might also want to have a look at the tab <i>console</i>. If something fails is <a href=\"/part3\">part 3</a> of the course shows how the problem can be solved.</p>\n</div>\n<div class=\"content\">\n<h3>Implementing the functionality</h3>\n<p>Finally we are ready to start writing some code.</p>\n<p>Let's start from basics. Ilari wants to keep track of his experiences on his flight journeys.\nWhat he wants to be able to save are </i>diary entries</i> that include: </p>\n<ul>\n<li>Date of the entry</li>\n<li>Weather conditions (either good, windy, rainy or stormy)</li>\n<li>Visibility (either good, ok or poor)</li>\n<li>Free text entry of experience</li>\n</ul>\n<p>We already have some example data, which we will use as a guideline on how to develop further. The data is in json format and can be found <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diaryentries.json\">here</a>.</p>\n<p>Data looks like the following </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"date\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2017-04-01\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"weather\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sunny\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"visibility\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"good\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Everything went better than expected, I'm learning much\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n  // ...\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Let's start by creating an endpoint that returns all flight diary entries. </p>\n<p>First we shall made some decision hot to structure our source code. It is better to put all the source code\nunder the directory <i>src</i>, so that the source  code is not mixed up with configuration files. We will move also <i>index.ts</i> there and make the corresponding changes to npm scripts.</p>\n<p>We'll decide to put all <a href=\"/en/part4/structure_of_backend_application_introduction_to_testing\">routers</a> that is the modules that take care of handling a set of specific resource such as <i>diaries</i> under the directory <i>src/routes</i>. This differs a bit from the convention of <a href=\"/en/part4\">part 4</a>, where we used directory <i>src/controllers</i>.</p>\n<p>The routes taking care of diary endpoints in <i>src/routes/diaries.ts</i> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fetching all diaries!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>route all requests to prefix <i>/api/diaries</i> to that specific router in <em>index.ts</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span></span><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/ping'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'someone pinged here'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pong'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  \napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now when making a HTTP POST request to <a href=\"http://localhost:3000/api/diaries\">http://localhost:3000/api/diaries</a> we should see the message <i>Fetching all diaries!</i>.</p>\n<p>The next thing is to start serving the seed data (found <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diaryentries.json\">here</a>) from the app. We shall fetch the data and save it to file <i>data/diaries.json</i></p>\n<p>We will not write the code that does the actual data manipulation to router, but instead create a <i>service</i> that takes care of the data manipulation. It is quite a common pattern to separate the \"business logic\" from router code to own modules that are quite often called <i>services</i>. The name service originates from <a href=\"https://en.wikipedia.org/wiki/Domain-driven_design\">Domain driven design</a> and was made popular by the <a href=\"https://spring.io/\">Spring</a> framework.</p>\n<p>Let us create directory <i>src/services</i> and inside it the file <i>diaryService.ts</i> with two functions that are needed in fetching and saving the diaries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/diaries.json'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getEntries</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaryData<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But something is not right</p>\n<picture><img src=\"/static/884eed5d4bb95087f3a48f39769a9a0d/14be6/17c.png\" srcset=\"/static/884eed5d4bb95087f3a48f39769a9a0d/4cce7/17c.png 200w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/bae5f/17c.png 400w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/14be6/17c.png 800w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/1b35a/17c.png 1200w,\n/static/884eed5d4bb95087f3a48f39769a9a0d/f5052/17c.png 1476w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The hint says we might want to use <i>resolveJsonModule</i>. Let's add it to our tsconfig: </p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES6\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./build/\"</span><span class=\"token punctuation\">,</span> \n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedParameters\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>       \n    <span class=\"token property\">\"noImplicitReturns\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noFallthroughCasesInSwitch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Problems are now gone.</p>\n<blockquote>\n<p><strong>Note</strong> for some reason VC Code has many times complained that it does not find the file <i>../../data/diaries.json</i> in the service despite the file exists. That is a bug and the complaint goes away when editor is restarted. </p>\n</blockquote>\n<p>As before we've seen how the compiler can decide the type of a variable by the value it is being assigned to and in a similar way the compiler interprets larger data sets consisting of objects and arrays. This is why the compiler actually can warn us if we are trying to do something suspicious to the json data we are currently handling. If we're handling an array that includes specific types of objects and we're trying to add an object there that doesn't have all of the fields that the other objects have or is having type conflicts (for example a number where should be a string) the compiler can give us a warning. </p>\n<p>Even though the compiler is pretty intelligent in making sure to not to do anything unwanted, it is safer to create the correct types to the data by yourself.</p>\n<p>Now we have a basic working TypeScript express app but there's barely any actual <i>typings</i> in the code. Since we now have a clear definition on what type of data should be accepted for the weather and visibility fields, there is no reason for us not to include also those types in the code.</p>\n<p>Let's create our type-exclusive file <i>types.ts</i> in which we'll put all our types for this project.</p>\n<p>First let's type the allowed <i>Weather</i> and <i>Visibility</i> values through a <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\">union type</a> with allowed strings: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Weather <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'rainy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'cloudy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'windy'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> type Visibility <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'good'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'ok'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And from there we can continue to create our own simple DiaryEntry type as <a href=\"http://www.typescriptlang.org/docs/handbook/interfaces.html\">interface</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  date<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  weather<span class=\"token punctuation\">:</span> Weather<span class=\"token punctuation\">;</span>\n  visibility<span class=\"token punctuation\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  comment<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>We can now try to type our imported json: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/diaries.json'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> diaries<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=</span> diaryData<span class=\"token punctuation\">;</span></span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But since the json already has its values declared, assigning a type for the dataset results in an error:</p>\n<picture><img src=\"/static/4a4d7fc6b2c39423984646fd6830f0d8/14be6/19b.png\" srcset=\"/static/4a4d7fc6b2c39423984646fd6830f0d8/4cce7/19b.png 200w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/bae5f/19b.png 400w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/14be6/19b.png 800w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/1b35a/19b.png 1200w,\n/static/4a4d7fc6b2c39423984646fd6830f0d8/237c2/19b.png 1432w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The end of the error message reveals the reason, the <i>weather</i> fields are incompatible. In <i>DiaryEntry</i> we specified that the type is <i>Weather</i> but TypeScript compiler inferred that the field in json has type <i>string</i>.</p>\n<p>This can be surpassed if we are certain that we know what we are doing by <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions\">type assertion</a>. When we assert the type of the variable <i>diaryData</i> to be <i>DiaryData</i> with the keyword <i>as</i>, everything should work: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaryData <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.json'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Weather<span class=\"token punctuation\">,</span> Visibility<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> diaries<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=</span> diaryData <span class=\"token keyword\">as</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Type assertion should not be used unless there's no other way to proceed since there's always the danger of asserting an unfit type to an object and then perhaps causing a nasty runtime error. While the compiler trusts you to know when using <i>as</i>, at the same time it leaves the intelligence of the whole TypeScript to manual interpretation. </p>\n<p>In our case we could change our data exportation method so that we could have the typing happen naturally within the file where the data resides. Since typings van not be used in a JSON-file, we should convert the json-file to a ts-file which exports the typed  data in the following way: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> diaryEntries<span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"weather\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"visibility\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"comment\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries<span class=\"token punctuation\">;</span></code></pre></div>\n<p>When we now import the array, it is already intelligently interpreted so that even the <i>weather</i> and <i>visibility</i> fields are understood correctly:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/diaries'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token operator\">></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that, if we want to reserve the opportunity to save also entries without a field, e.g. <i>comment</i>, we could set type field as <a href=\"http://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties\">optional</a> by adding <i>?</i> to the type declaration: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n  date<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  weather<span class=\"token punctuation\">:</span> Weather<span class=\"token punctuation\">;</span>\n  visibility<span class=\"token punctuation\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  comment<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<h3>Utility Types</h3>\n<p>Sometimes we end up in a situation where we want to use a specific modification of a type. For example consider using a general listing page for data that has some non-sensitive and some  sensitive data. In a common listing page we might want to be sure that no sensitive data is being used or shown so we might only <i>pick</i> the fields of a type we allow to be used in that situation. For that we use the utility type <a href=\"http://www.typescriptlang.org/docs/handbook/utility-types.html#picktk\">Pick</a>.</p>\n<p>In our example we should consider that Ilari might want to create a listing of all his diary entries <i>excluding</i> the comment field, since during a very scary flight he might end up writing there something he wouldn't necessarily want to show anyone else.</p>\n<p>The <a href=\"http://www.typescriptlang.org/docs/handbook/utility-types.html#picktk\">Pick</a> utility type allows us to choose what fields of a type we want to use of an existing type. Pick can be used to construct a completely new type or just in time when informing a function what it should return. Utility types are special kinds of type tools, but they are used exactly as regular types.</p>\n<p>In our case, in order to create this kind of \"narrowed\" version of the <i>DiaryEntry</i> type we could just use the Pick in the function declaration:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Array<span class=\"token operator\">&lt;</span>Pick<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'weather'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'visibility'</span><span class=\"token operator\">>></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>and it would expect the function to return an array of the modification of DiaryEntry type which includes only the four declared fields. </p>\n<p>Since <a href=\"http://www.typescriptlang.org/docs/handbook/utility-types.html#picktk\">Pick</a> requires the type it modifies to be given as a <a href=\"http://www.typescriptlang.org/docs/handbook/generics.html#working-with-generic-type-variables\">type variable</a>, simillar as the Array, we have now two nested type variables and the syntax looks already a bit odd. We can improve the readability by using the <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#array\">alternative</a> syntax of arrays:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Pick<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'date'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'weather'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'visibility'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Even better in this case when we want to exclude only one field, would be to use the <a href=\"http://www.typescriptlang.org/docs/handbook/utility-types.html#omittk\">Omit</a> utility type, for which you can declare what fields to exclude:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Another way would be to declare a completely new type for the <i>NonSensitiveDiaryEntry</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NonSesitiveDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'comment'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The code becomes now</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/diaries'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSesitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NonSesitiveDiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addEntry</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  addEntry<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  getNonSensitiveEntries</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One thing causes a bit of concern. In the function <i>getNonSensitiveEntries</i> we are returning the complete entries of diaries and <i>no error is given</i> despite typing!</p>\n<p>This is because <a href=\"http://www.typescriptlang.org/docs/handbook/type-compatibility.html\">TypeScript only checks</a> whether we have all the wanted fields or not, but excess fields are not prohibited. In our case it means that it is <i>not prohibited</i> to return the <i>DiaryEntry[]</i> type object, but if we were to try to get a hold of the field <i>comment</i> where the diary is returned, it would not be restricted since it would be pointing to a field that TypeScript is unaware of even though it exists.</p>\n<p>Unfortunately this can lead to unwanted behaviour if you are not aware of what you are doing; this situation is valid in terms of TypeScript but is most likely allowing use that is not wanted. If we now return all of the diaryEntries from the function <i>getNonSensitiveEntries</i> as they are to <i>frontend</i>, we are actually leaking the unwanted fields for the requesting browser even though our types seem to imply otherwise!</p>\n<p>Because TypeScript doesn't modify the actual data but only types it, we need to implement the exclusion of the fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> diaries <span class=\"token keyword\">from</span> <span class=\"token string\">'../../data/entries.js'</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NonSesitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span>\n\n<span class=\"token keyword\">const</span> getEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> diaries\n<span class=\"token punctuation\">}</span> \n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NonSesitiveDiaryEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    id<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    date<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    weather<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">    visibility<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addDiary</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiary\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we nw would try to return this data with the basic <i>DiaryEntry</i> type, i.e. if we would type the function as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> getNonSensitiveEntries <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> DiaryEntry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>we would get the following error:</p>\n<picture><img src=\"/static/4cf0e3835086dc22ca9c00d89dabd716/14be6/22b.png\" srcset=\"/static/4cf0e3835086dc22ca9c00d89dabd716/4cce7/22b.png 200w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/bae5f/22b.png 400w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/14be6/22b.png 800w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/1b35a/22b.png 1200w,\n/static/4cf0e3835086dc22ca9c00d89dabd716/93539/22b.png 1590w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Again the last line of error message is the most helpful one. Let us now undo this undesired modification.</p>\n<p>Utility types include a large set of handy tools and it is definitely worthwhile to take some time studying <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">the documentation</a>.</p>\n<p>Finally we can complete the route that returns all diary entries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">getNonSensitiveEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saving a diary!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>The response is what we expect it to be</p>\n<picture><img src=\"/static/2874edda399d6b828630de1496dbc188/14be6/26.png\" srcset=\"/static/2874edda399d6b828630de1496dbc188/4cce7/26.png 200w,\n/static/2874edda399d6b828630de1496dbc188/bae5f/26.png 400w,\n/static/2874edda399d6b828630de1496dbc188/14be6/26.png 800w,\n/static/2874edda399d6b828630de1496dbc188/1b35a/26.png 1200w,\n/static/2874edda399d6b828630de1496dbc188/9ee03/26.png 1600w,\n/static/2874edda399d6b828630de1496dbc188/957b7/26.png 1618w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.10.-9.11.</h3>\n<p>Simillarly to Ilari's flight service, we do not use a real database in our app but instead use hardcoded data, that is in the files <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/diagnoses.json\">diagnoses.json</a> and <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/patients.json\">patients.json</a>. Get the files and store those into a directory called <i>data</i> under your project. All data modification can be done in runtime memory, so during this part it is <i>not necessary to write to a file</i>.</p>\n<h4>9.10: Patientor backend, step3</h4>\n<p>Create a type <i>Diagnose</i> and use it to create endpoint <i>/api/diagnoses</i> for fetching all diagnoses with HTTP GET.</p>\n<p>Structure your code properly by using meaninfully named directories and files.</p>\n<p><strong>Note</strong> that <i>diagnoses</i> may or may not contain the field <i>latin</i>. You might want to use <a href=\"https://www.typescriptlang.org/docs/handbook/interfaces.html#optional-properties\">optional properties</a> in the type definition.</p>\n<h4>9.11: Patientor backend, step4</h4>\n<p>Create data type <i>Patient</i> and set up a GET-endpoint <i>/api/patients</i> that returns all patients to the frontend excluding field <i>ssn</i>. Use a <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html\">utility type</a> to make sure you are selecting and returning only the wanted.</p>\n<p>In this exercise you may assume that field <i>gender</i> has type <i>string</i>.</p>\n<p>Try the endpoint with browser and to sure that <i>ssn</i> is not included in response:</p>\n<picture><img src=\"/static/bc4ce99035b5419acfa2d65698c5cb2d/14be6/22g.png\" srcset=\"/static/bc4ce99035b5419acfa2d65698c5cb2d/4cce7/22g.png 200w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/bae5f/22g.png 400w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/14be6/22g.png 800w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/1b35a/22g.png 1200w,\n/static/bc4ce99035b5419acfa2d65698c5cb2d/ad438/22g.png 1352w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>After creating the endpoint, ensure that the <i>frontend</i> shows the list of patients:</p>\n<picture><img src=\"/static/c6b49beac1a640408462ec316e341d7e/14be6/22h.png\" srcset=\"/static/c6b49beac1a640408462ec316e341d7e/4cce7/22h.png 200w,\n/static/c6b49beac1a640408462ec316e341d7e/bae5f/22h.png 400w,\n/static/c6b49beac1a640408462ec316e341d7e/14be6/22h.png 800w,\n/static/c6b49beac1a640408462ec316e341d7e/1b35a/22h.png 1200w,\n/static/c6b49beac1a640408462ec316e341d7e/9ee03/22h.png 1600w,\n/static/c6b49beac1a640408462ec316e341d7e/766b4/22h.png 1682w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"content\">\n<h3>Preventing an accidental undefined result</h3>\n<p>Let us expand the backend to support fetching one specific entry with a HTTP GET request to route <i>api/diaries/:id</i></p>\n<p>The DiaryService needs to be extended with  <i>findById</i>-function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  getEntries<span class=\"token punctuation\">,</span>\n  getNonSensitiveEntries<span class=\"token punctuation\">,</span>\n  addDiary<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  findById</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>But once again, a new problem comes into light:</p>\n<picture><img src=\"/static/ffec5cdfddb4a1c59d7cab5702849a32/14be6/23e.png\" srcset=\"/static/ffec5cdfddb4a1c59d7cab5702849a32/4cce7/23e.png 200w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/bae5f/23e.png 400w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/14be6/23e.png 800w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/1b35a/23e.png 1200w,\n/static/ffec5cdfddb4a1c59d7cab5702849a32/e4e45/23e.png 1312w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The issue now it that there is no guarantee that an entry with the specific id can be found. It is good that this potentially problematic issue surfaces already at compile phase, since without TypeScript there would be no indication of this possibility and in the worst case you might end up returning a result of an <i>undefined</i> object instead of informing about the nonexistense of searched item by other means.</p>\n<p>In cases like this we first of all need to decide <i>what is the desired return value</i> if an object is not found, and how to handle the case. The value <i>undefined</i> that is returned by <i>find</i>-method of an array is actually fine for us if a result is not found. Thus we could solve our problem by typing the return value as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> findById <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token operator\">|</span> undefined <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> entry <span class=\"token operator\">=</span> diaries<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The route handler is the following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diaryService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/diaryService'</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> diary <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>diary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">sendStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Adding a new diary</h3>\n<p>Let's start building the HTTP POST endpoint for adding flight diary entries. The accepted values should confirm to the example data.</p>\n<p>The code handling the response looks as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">AddEntry</span><span class=\"token punctuation\">(</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>corresponding method in <i>diaryService</i> looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  NonSesitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  Visibility<span class=\"token punctuation\">,</span> Weather</span>  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> addEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    date<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">:</span> Weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">:</span> Visibility<span class=\"token punctuation\">,</span> comment<span class=\"token punctuation\">:</span> string\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    \n  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  \n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As we can see the <i>addDiary</i> function is growing to be pretty hard to read, when having all the fields as separate parameters. It might be better to just send the data as an object to the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">,</span> weather<span class=\"token punctuation\">,</span> visibility<span class=\"token punctuation\">,</span> comment <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>    date<span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But wait, what is the type of this object? It is not exactly a <i>DiaryEntry</i>, since it is still missign the <i>id</i> field. It could be useful for us just to create a new type <i>NewDiaryEntry</i> which could work as a type for the not-yet saved diary. Let us create that in <i>types.ts</i> using the existing <i>DiaryEntry</i> object with the <a href=\"http://www.typescriptlang.org/docs/handbook/utility-types.html#omittk\">Omit</a> utility type:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type NewDiaryEntry <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>DiaryEntry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And now we can use this type in our DiaryService and we can just destructure the whole new entry object when creating the entry to be saved: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry<span class=\"token punctuation\">,</span> NonSesitiveDiaryEntry<span class=\"token punctuation\">,</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../types'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> addDiary <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> entry<span class=\"token punctuation\">:</span> NewDiaryEntry <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>diaries<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>d <span class=\"token operator\">=></span> d<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">...</span>entry</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  diaries<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> newDiaryEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the code looks much cleaner! </p>\n<p>In order to parse the incoming data we must have the  <i>json</i> middleware configured:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> diaryRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/diaries'</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">PORT</span> <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/diaries'</span><span class=\"token punctuation\">,</span> diaryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PORT</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Server running on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PORT</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and now the application is ready to receive HTTP POST requests for adding diaries with the desired fields!</p>\n<h3>Proofing requests</h3>\n<p>There are a plenty of things that can go wrong when accepting data from an outside source. Applications work rarely fully on their own and we are forced to live with the fact that data sources outside of a single system cannot be fully trusted. When the data is coming from an outside source, there's no way that it can be already typed when we receive it so we need to make decision on how to handle the uncertainty that comes with the data.</p>\n<p>The way Express handles parsing the request body is that it asserts the type <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\">any</a> to all the body fields. In our situation this doesn't come apparent in any way in the editor, but if we start looking at the variables more closely and hover on any of them, we can see that each of them is indeed <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#any\">any</a>.  Editor does not give us any complaints when we pass this data to <i>addDiary</i> as arguments: </p>\n<picture><img src=\"/static/991e3e29e34d9f6956d04d862f5b78f6/14be6/27.png\" srcset=\"/static/991e3e29e34d9f6956d04d862f5b78f6/4cce7/27.png 200w,\n/static/991e3e29e34d9f6956d04d862f5b78f6/bae5f/27.png 400w,\n/static/991e3e29e34d9f6956d04d862f5b78f6/14be6/27.png 800w,\n/static/991e3e29e34d9f6956d04d862f5b78f6/1b35a/27.png 1200w,\n/static/991e3e29e34d9f6956d04d862f5b78f6/ffa3e/27.png 1486w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The value of type <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#an\">any</a> can be assigned to <i>any</i> type of variable since it <i>might be</i> the wanted type. This is definitiely not safe to trust so\ncheck the incoming values (regardless whether we are using TypeScript or not).</p>\n<p>We could just add simple <i>exists</i> and <i>is-value-valid</i> checks to the function defining the route but since we also need to ensure that <i>Weather</i> and <i>Visibility</i> values are of the correct form, it is better to write the parsing and validation logic to a separate file <i>utils.ts</i>.</p>\n<p>Our intention is to define a function <i>toNewDiaryEntry</i> that gets the request body as a parameter and returns a properly typed <i>NewDiaryEntry</i>. Route definition uses the function as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"token comment\">// ...</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> newDiaryEntry <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>      \n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> addedEntry <span class=\"token operator\">=</span> diaryService<span class=\"token punctuation\">.</span><span class=\"token function\">addDiary</span><span class=\"token punctuation\">(</span>newDiaryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>addedEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Since we are now making trustworthy code and trying to make sure that we are getting exactly what we want from the requests we should get started with the goal of parsing and validating each field we are waiting for. </p>\n<p>The skeleton of the function <i>toNewDiaryEntry</i> looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewDiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewDiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> newEntry<span class=\"token punctuation\">:</span> NewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">return</span> newEntry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> toNewDiaryEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the function we want to parse each field and make sure that what is returned is exactly of type <i>NewDiaryEntry</i>. Thus we should check each field separately. </p>\n<p>Once again we have a typing issue: what is the <i>object</i> type? Since the <i>object</i> is in fact the body of a request, Express has typed it with <i>any</i>. Since within this function the whole idea is to map unknown types of fields to correct ones and check whether they are defined as expected, this might be the rare case where we actually <i>want to allow the <i>any</i> type</i>. </p>\n<p>However if we type the object to <i>any</i>, eslint gives us a complaint:</p>\n<picture><img src=\"/static/3fe6ce7c383db627063b023872c7e86b/14be6/24e.png\" srcset=\"/static/3fe6ce7c383db627063b023872c7e86b/4cce7/24e.png 200w,\n/static/3fe6ce7c383db627063b023872c7e86b/bae5f/24e.png 400w,\n/static/3fe6ce7c383db627063b023872c7e86b/14be6/24e.png 800w,\n/static/3fe6ce7c383db627063b023872c7e86b/1b35a/24e.png 1200w,\n/static/3fe6ce7c383db627063b023872c7e86b/ffdc4/24e.png 1504w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The cause for the complaint is the eslit-rule <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/no-explicit-any.md\">no-explicit-any</a> that prevents us form explicitly setting type to be <i>any</i>. Since this is in general a good rule to follow but just in this particular file undesired, it is better to allow using <i>any</i> now by disabling the eslint-rule in the file. This happens by adding the following line at the file:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-disable @typescript-eslint/no-explicit-any */</span></code></pre></div>\n<p>Lets start creating the parsers for each of the fields of <i>object</i>.</p>\n<p>To validate the <i>comment</i> field we need to check that it exists, and to ensure that it is of the type <i>string</i>.</p>\n<p>The function should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseComment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>comment <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing comment: '</span> <span class=\"token operator\">+</span> comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> comment<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The function gets the parameter of type <i>any</i> and returns it as type <i>string</i> if it exists and is of the right type.</p>\n<p>The string validation function looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> text is string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function is so called <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\">type guard</a>, that is, a function that returns a boolean <i>and</i> which has a <i>type predicate</i> as the return type. In our case the type predicate is</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">text is string</code></pre></div>\n<p>The general form of a type predicate is <em>parameterName is Type</em> where the <em>parameterName</em> is the name of the function parameter and <em>Type</em> is the targetted type.</p>\n<p>If the type guard function returns true, the TypeScript compiler knows that the tested variable has the type that was defined in the type predicate. </p>\n<p>Before the type guard is called, the actual type of the variable <i>comment</i> is not known:</p>\n<picture><img src=\"/static/3db4e2a6092268e6df2afea9e1e2ec4a/14be6/28.png\" srcset=\"/static/3db4e2a6092268e6df2afea9e1e2ec4a/4cce7/28.png 200w,\n/static/3db4e2a6092268e6df2afea9e1e2ec4a/bae5f/28.png 400w,\n/static/3db4e2a6092268e6df2afea9e1e2ec4a/14be6/28.png 800w,\n/static/3db4e2a6092268e6df2afea9e1e2ec4a/1b35a/28.png 1200w,\n/static/3db4e2a6092268e6df2afea9e1e2ec4a/f6157/28.png 1468w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>But after the call, if the code proceeds past the exception (that is the type guard returned true), compiler knows that <i>comment</i> is of the type <i>string</i>:</p>\n<picture><img src=\"/static/41dca0199b104245c6d764a59c175fb7/14be6/29.png\" srcset=\"/static/41dca0199b104245c6d764a59c175fb7/4cce7/29.png 200w,\n/static/41dca0199b104245c6d764a59c175fb7/bae5f/29.png 400w,\n/static/41dca0199b104245c6d764a59c175fb7/14be6/29.png 800w,\n/static/41dca0199b104245c6d764a59c175fb7/1b35a/29.png 1200w,\n/static/41dca0199b104245c6d764a59c175fb7/e34fe/29.png 1456w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Why do we have two conditions in the string type guard:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> text is string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> text <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>would it not be enought to write the guard like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> text is string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">typeof</span> text <span class=\"token operator\">===</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The simpler form is most likely good for all practical purposes. However if we want to be absolutely sure, both the conditions are needed, since there are two different means to create string objects in JavaScript and both of these work a bit differently with respect to operators <i>typeof</i> and <i>instanceof</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"I'm a string primitive\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I'm a String Object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typeof</span> a<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'string'</span>\n<span class=\"token keyword\">typeof</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token string\">'object'</span>\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">false</span>\nb <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span> returns <span class=\"token boolean\">true</span></code></pre></div>\n<p>It is however unlikely that anybody creates strings with a constructor function, so most likely the simpler version of the type guard would be just fine. </p>\n<p>Next let us consider the field <i>date</i>. Parsing and validating the date object is pretty similar, since TypeScript doesn't really know a type for date, we need to treat it as as <i>string</i>. We still definitely should use JavaScript level validation to check whether the date format is acceptable. </p>\n<p>We will add the following functions</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> boolean <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parseDate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> string <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>date <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isDate</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing date: '</span> <span class=\"token operator\">+</span> date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> date<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nothing really special here, only thing is that we can't use a type guard since a date is in this case considered only to be a <i>string</i>. Notice that even though the <i>date</i> variable is accepted as <i>any</i> by the <i>parseDate</i> function, after checking the type with <i>isString</i> the type is already a string which is why we are able to give the variable to the function <i>isDate</i> with the type <i>string</i> without any errors.</p>\n<p>Finally we are ready to move on to the last two types, Weather and Visibility.</p>\n<p>We would like the validation and parsing to work as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Weather <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>weather <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isWeather</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing weather: '</span> <span class=\"token operator\">+</span> weather<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">return</span> weather<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The question now is, how can we validate that the string is of a specific form? One possible way of writing the type guard would be following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> str is Weather <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'stormy'</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This would work just fine but the problem is that list of possible weathers does not necessarily stay in sync with the type definition if that is altered. This is most certainly not a nice thing since we would like to have just a single source for all possible weather types.</p>\n<p>A better solution in this case is to improve the actual Weather type and instead of type alias use the TypeScript <a href=\"https://www.typescriptlang.org/docs/handbook/enums.html\">enum</a> which allows us to use the actual values in the running code, not only in the compilation phase.</p>\n<p>Let us redefine the type <i>Weather</i> as follows: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Weather <span class=\"token punctuation\">{</span>\n  Sunny <span class=\"token operator\">=</span> <span class=\"token string\">'sunny'</span><span class=\"token punctuation\">,</span>\n  Rainy <span class=\"token operator\">=</span> <span class=\"token string\">'rainy'</span><span class=\"token punctuation\">,</span>\n  Cloudy <span class=\"token operator\">=</span> <span class=\"token string\">'cloudy'</span><span class=\"token punctuation\">,</span>\n  Stormy <span class=\"token operator\">=</span> <span class=\"token string\">'stormy'</span><span class=\"token punctuation\">,</span> \n  Windy <span class=\"token operator\">=</span> <span class=\"token string\">'windy'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This allows us to check that a string confirms to the accepted values of the Weather enum type and the type guard can be changed to following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> param is Weather <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One thing to notice here is that we have changed the parameter type to <i>any</i>, if it would be string, the <i>includes</i> check would not compile. The change makes sense also if you think about the reusability of the function, by allowing <i>any</i> as a parameter, we can use the function with confidence knowing that whatever we might feed to it, the function answers always to the question of whether the variable is a valid weather or not. </p>\n<p>The function <i>parseWeather</i> can be simplified a bit</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> parseWeather <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Weather <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>weather <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isWeather</span><span class=\"token punctuation\">(</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing weather: '</span> <span class=\"token operator\">+</span> weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">return</span> weather<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With these changes, one issue arises, our data does not conform anymore to our types:</p>\n<picture><img src=\"/static/2d23be7abdebf83abf928340dce1d30c/14be6/30.png\" srcset=\"/static/2d23be7abdebf83abf928340dce1d30c/4cce7/30.png 200w,\n/static/2d23be7abdebf83abf928340dce1d30c/bae5f/30.png 400w,\n/static/2d23be7abdebf83abf928340dce1d30c/14be6/30.png 800w,\n/static/2d23be7abdebf83abf928340dce1d30c/1b35a/30.png 1200w,\n/static/2d23be7abdebf83abf928340dce1d30c/34685/30.png 1480w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This is because a string can't just be assumed to be an enum. </p>\n<p>The fix is to map the initial data elements to <i>DiaryEntry</i> type with the <i>toNewDiaryEntry</i> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DiaryEntry <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/types\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> toNewDiaryEntry <span class=\"token keyword\">from</span> <span class=\"token string\">\"../src/utils\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"date\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2017-01-01\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"weather\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rainy\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"visibility\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"poor\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"comment\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Pretty scary flight, I'm glad I'm alive\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">const</span> diaryEntries<span class=\"token punctuation\">:</span> DiaryEntry <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>obj <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token function\">toNewDiaryEntry</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> DiaryEntry\n  object<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>id\n  <span class=\"token keyword\">return</span> object\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> diaryEntries</code></pre></div>\n<p>Note that since <i>toNewDiaryEntry</i> returns object of the type <i>NewDiaryEntry</i> we need to assert it to be <i>DiaryEntry</i> with <a href=\"http://www.typescriptlang.org/docs/handbook/basic-types.html#type-assertions\">as</a> opeator.</p>\n<p>Enums are usually used when there is a set of predetermined values that are not expected to change in the future. Usually enums are used for much tighter unchanging values (for example weekdays, months, directions) but since they offer us a great way to validate our incoming values we might as well use them in our case. </p>\n<p>We still need to give the same treatment to <i>visibility</i>. The enum looks following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Visibility <span class=\"token punctuation\">{</span>\n  Great <span class=\"token operator\">=</span> <span class=\"token string\">'great'</span><span class=\"token punctuation\">,</span>\n  Good <span class=\"token operator\">=</span> <span class=\"token string\">'good'</span><span class=\"token punctuation\">,</span>\n  Cloudy <span class=\"token operator\">=</span> <span class=\"token string\">'ok'</span><span class=\"token punctuation\">,</span>\n  Poor <span class=\"token operator\">=</span> <span class=\"token string\">'poor'</span><span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Type guard and the parser are here</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> param is Visibility <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>Visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> parseVisibility <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Visibility <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>visibility <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">isVisibility</span><span class=\"token punctuation\">(</span>visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Incorrect or missing visibility: '</span> <span class=\"token operator\">+</span> visibility<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n  <span class=\"token keyword\">return</span> visibility<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And finally we can finalize the function <i>toNewDiaryEntry</i> that takes care of validating and parsing the fields of the post data: </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> toNewDiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">:</span> any<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> NewDiaryEntry <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token function\">parseDate</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    comment<span class=\"token punctuation\">:</span> <span class=\"token function\">parseComment</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    weather<span class=\"token punctuation\">:</span> <span class=\"token function\">parseWeather</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>weather<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    visibility<span class=\"token punctuation\">:</span> <span class=\"token function\">parseVisibility</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>visibility<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first version of flight diary application is now completed! </p>\n<p>If we now try to create a new diary with invalid or missing fields we are getting an appropriate error message</p>\n<picture><img src=\"/static/f80b0dcb394e868f0fe7d3713852c9e7/14be6/30b.png\" srcset=\"/static/f80b0dcb394e868f0fe7d3713852c9e7/4cce7/30b.png 200w,\n/static/f80b0dcb394e868f0fe7d3713852c9e7/bae5f/30b.png 400w,\n/static/f80b0dcb394e868f0fe7d3713852c9e7/14be6/30b.png 800w,\n/static/f80b0dcb394e868f0fe7d3713852c9e7/1b35a/30b.png 1200w,\n/static/f80b0dcb394e868f0fe7d3713852c9e7/c9ac2/30b.png 1410w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.12.-9.13.</h3>\n<h4>9.12: Patientor backend, step5</h4>\n<p>Create a POST-endpoint <i>/api/patients</i> for adding patients. Ensure that you can add patients also from the frontend.</p>\n<h4>9.13: Patientor backend, step6</h4>\n<p>Set up safe parsing, validation and type guards to the POST <i>/api/patients</i> request. </p>\n<p>Refactor the <i>Gender</i> field to use a <a href=\"http://www.typescriptlang.org/docs/handbook/enums.html\">enum</a> type.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/part-9-ed8ae98c5d885b4d1928a681eefbe7c4.svg"},"part":9,"letter":"c","lang":"en"}}},"pageContext":{"part":9,"letter":"c","lang":"en"}}